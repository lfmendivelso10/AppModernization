/**
 */
package visualizacionMetricas3.visualizacion.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import visualizacionMetricas3.visualizacion.util.VisualizacionAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class VisualizacionItemProviderAdapterFactory extends VisualizacionAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public VisualizacionItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link visualizacionMetricas3.visualizacion.Elipse} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ElipseItemProvider elipseItemProvider;

	/**
	 * This creates an adapter for a {@link visualizacionMetricas3.visualizacion.Elipse}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createElipseAdapter() {
		if (elipseItemProvider == null) {
			elipseItemProvider = new ElipseItemProvider(this);
		}

		return elipseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link visualizacionMetricas3.visualizacion.Cuadrilatero} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CuadrilateroItemProvider cuadrilateroItemProvider;

	/**
	 * This creates an adapter for a {@link visualizacionMetricas3.visualizacion.Cuadrilatero}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCuadrilateroAdapter() {
		if (cuadrilateroItemProvider == null) {
			cuadrilateroItemProvider = new CuadrilateroItemProvider(this);
		}

		return cuadrilateroItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link visualizacionMetricas3.visualizacion.Clase} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClaseItemProvider claseItemProvider;

	/**
	 * This creates an adapter for a {@link visualizacionMetricas3.visualizacion.Clase}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClaseAdapter() {
		if (claseItemProvider == null) {
			claseItemProvider = new ClaseItemProvider(this);
		}

		return claseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link visualizacionMetricas3.visualizacion.Rombo} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RomboItemProvider romboItemProvider;

	/**
	 * This creates an adapter for a {@link visualizacionMetricas3.visualizacion.Rombo}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRomboAdapter() {
		if (romboItemProvider == null) {
			romboItemProvider = new RomboItemProvider(this);
		}

		return romboItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link visualizacionMetricas3.visualizacion.Triangulo} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TrianguloItemProvider trianguloItemProvider;

	/**
	 * This creates an adapter for a {@link visualizacionMetricas3.visualizacion.Triangulo}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTrianguloAdapter() {
		if (trianguloItemProvider == null) {
			trianguloItemProvider = new TrianguloItemProvider(this);
		}

		return trianguloItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link visualizacionMetricas3.visualizacion.Paquete} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PaqueteItemProvider paqueteItemProvider;

	/**
	 * This creates an adapter for a {@link visualizacionMetricas3.visualizacion.Paquete}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPaqueteAdapter() {
		if (paqueteItemProvider == null) {
			paqueteItemProvider = new PaqueteItemProvider(this);
		}

		return paqueteItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link visualizacionMetricas3.visualizacion.Diagrama} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiagramaItemProvider diagramaItemProvider;

	/**
	 * This creates an adapter for a {@link visualizacionMetricas3.visualizacion.Diagrama}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiagramaAdapter() {
		if (diagramaItemProvider == null) {
			diagramaItemProvider = new DiagramaItemProvider(this);
		}

		return diagramaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link visualizacionMetricas3.visualizacion.Label} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LabelItemProvider labelItemProvider;

	/**
	 * This creates an adapter for a {@link visualizacionMetricas3.visualizacion.Label}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLabelAdapter() {
		if (labelItemProvider == null) {
			labelItemProvider = new LabelItemProvider(this);
		}

		return labelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link visualizacionMetricas3.visualizacion.Borde} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BordeItemProvider bordeItemProvider;

	/**
	 * This creates an adapter for a {@link visualizacionMetricas3.visualizacion.Borde}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBordeAdapter() {
		if (bordeItemProvider == null) {
			bordeItemProvider = new BordeItemProvider(this);
		}

		return bordeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link visualizacionMetricas3.visualizacion.Punto} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PuntoItemProvider puntoItemProvider;

	/**
	 * This creates an adapter for a {@link visualizacionMetricas3.visualizacion.Punto}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPuntoAdapter() {
		if (puntoItemProvider == null) {
			puntoItemProvider = new PuntoItemProvider(this);
		}

		return puntoItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link visualizacionMetricas3.visualizacion.Herencia} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HerenciaItemProvider herenciaItemProvider;

	/**
	 * This creates an adapter for a {@link visualizacionMetricas3.visualizacion.Herencia}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHerenciaAdapter() {
		if (herenciaItemProvider == null) {
			herenciaItemProvider = new HerenciaItemProvider(this);
		}

		return herenciaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link visualizacionMetricas3.visualizacion.Implementacion} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ImplementacionItemProvider implementacionItemProvider;

	/**
	 * This creates an adapter for a {@link visualizacionMetricas3.visualizacion.Implementacion}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createImplementacionAdapter() {
		if (implementacionItemProvider == null) {
			implementacionItemProvider = new ImplementacionItemProvider(this);
		}

		return implementacionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link visualizacionMetricas3.visualizacion.Dependencia} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DependenciaItemProvider dependenciaItemProvider;

	/**
	 * This creates an adapter for a {@link visualizacionMetricas3.visualizacion.Dependencia}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDependenciaAdapter() {
		if (dependenciaItemProvider == null) {
			dependenciaItemProvider = new DependenciaItemProvider(this);
		}

		return dependenciaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link visualizacionMetricas3.visualizacion.Asociacion} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AsociacionItemProvider asociacionItemProvider;

	/**
	 * This creates an adapter for a {@link visualizacionMetricas3.visualizacion.Asociacion}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAsociacionAdapter() {
		if (asociacionItemProvider == null) {
			asociacionItemProvider = new AsociacionItemProvider(this);
		}

		return asociacionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link visualizacionMetricas3.visualizacion.Agregacion} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AgregacionItemProvider agregacionItemProvider;

	/**
	 * This creates an adapter for a {@link visualizacionMetricas3.visualizacion.Agregacion}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAgregacionAdapter() {
		if (agregacionItemProvider == null) {
			agregacionItemProvider = new AgregacionItemProvider(this);
		}

		return agregacionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link visualizacionMetricas3.visualizacion.Composicion} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposicionItemProvider composicionItemProvider;

	/**
	 * This creates an adapter for a {@link visualizacionMetricas3.visualizacion.Composicion}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComposicionAdapter() {
		if (composicionItemProvider == null) {
			composicionItemProvider = new ComposicionItemProvider(this);
		}

		return composicionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link visualizacionMetricas3.visualizacion.Item} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ItemItemProvider itemItemProvider;

	/**
	 * This creates an adapter for a {@link visualizacionMetricas3.visualizacion.Item}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createItemAdapter() {
		if (itemItemProvider == null) {
			itemItemProvider = new ItemItemProvider(this);
		}

		return itemItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (elipseItemProvider != null) elipseItemProvider.dispose();
		if (cuadrilateroItemProvider != null) cuadrilateroItemProvider.dispose();
		if (claseItemProvider != null) claseItemProvider.dispose();
		if (romboItemProvider != null) romboItemProvider.dispose();
		if (trianguloItemProvider != null) trianguloItemProvider.dispose();
		if (paqueteItemProvider != null) paqueteItemProvider.dispose();
		if (diagramaItemProvider != null) diagramaItemProvider.dispose();
		if (labelItemProvider != null) labelItemProvider.dispose();
		if (bordeItemProvider != null) bordeItemProvider.dispose();
		if (puntoItemProvider != null) puntoItemProvider.dispose();
		if (herenciaItemProvider != null) herenciaItemProvider.dispose();
		if (implementacionItemProvider != null) implementacionItemProvider.dispose();
		if (dependenciaItemProvider != null) dependenciaItemProvider.dispose();
		if (asociacionItemProvider != null) asociacionItemProvider.dispose();
		if (agregacionItemProvider != null) agregacionItemProvider.dispose();
		if (composicionItemProvider != null) composicionItemProvider.dispose();
		if (itemItemProvider != null) itemItemProvider.dispose();
	}

}
